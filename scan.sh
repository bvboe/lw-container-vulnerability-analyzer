#!/bin/bash
cd "$(dirname "$0")"

DAYS_HISTORY=30

echo Analyze $DAYS_HISTORY days of history

mkdir -p data
mkdir -p output

for (( i=$DAYS_HISTORY; i>= 1; i--))
do
    DATE_STRING=`date -v-"$i"d +%Y-%m-%d`
    echo $DATE_STRING
    DATA_FILE_NAME="data/${DATE_STRING}-raw.json"
    FLAT_DATA_FILE_NAME="data/${DATE_STRING}-flattened.json"
    ENRICHED_DATA_FILE_NAME="data/${DATE_STRING}-enriched.json"
    PREV_ENRICHED_DATA_FILE_NAME=`ls data/*-enriched.json | sort -r | awk -v given_date="data/${DATE_STRING}" '$0 < given_date' | head -1 2>/dev/null`
    OUTPUT_FILE_NAME="output/${DATE_STRING}.csv"

    echo Prev file: $PREV_ENRICHED_DATA_FILE_NAME

    if ! [ -f $DATA_FILE_NAME ]
    then
        echo Load scan data for $DATE_STRING
        lacework vulnerability container list-assessments --json --start "${DATE_STRING}T00:00:00.000Z" --end "${DATE_STRING}T23:59:59.999Z" > $DATA_FILE_NAME

        FILE_SIZE=$(wc -c <"$DATA_FILE_NAME")
        if [ $FILE_SIZE -lt 6 ]; then
            echo Null dataset returned, skipping
            rm $DATA_FILE_NAME
            continue
        fi
    else
        echo Skipping $DATE_STRING, already loaded
    fi

    if ! [ -f $FLAT_DATA_FILE_NAME ]
    then
        echo Generating $FLAT_DATA_FILE_NAME
        cat $DATA_FILE_NAME | jq -c '.[] | .cves[] as $cves | {
                                                            "fixable": $cves.fixable,
                                                            "package_name": $cves.package_name,
                                                            "severity": $cves.severity,
                                                            "vuln_id": $cves.vuln_id,
                                                            "digest": .digest,
                                                            "image_id": .image_id,
                                                            "registry": .registry,
                                                            "repository": .repository,
                                                            "scan_status": .scan_status,
                                                            "scan_time": .scan_time
                                                            }' | grep "\"severity\":\"Critical\"" > $FLAT_DATA_FILE_NAME
    else
        echo Skipping $FLAT_DATA_FILE_NAME, already loaded
    fi

    DO_ANALYZE=true 
    if [ -f $ENRICHED_DATA_FILE_NAME ]
    then
        if [ `cat  $ENRICHED_DATA_FILE_NAME | wc -l` -eq `cat  $FLAT_DATA_FILE_NAME | wc -l` ]
        then
            DO_ANALYZE=false
            echo Files identical
        fi
    fi

    if [ $DO_ANALYZE = true ]
    then
        echo Analyze $FLAT_DATA_FILE_NAME
        rm -f $ENRICHED_DATA_FILE_NAME
        while read line; do
            if [ -z "$PREV_ENRICHED_DATA_FILE_NAME" ]
            then
                scan_time=`echo "$line" | jq -r '.scan_time'`
                vuln_first_observed=$scan_time
                vuln_age=0
            else
                vuln_id=`echo "$line" | jq -r '.vuln_id'`
                digest=`echo "$line" | jq -r '.digest'`
                image_id=`echo "$line" | jq -r '.image_id'`
                registry=`echo "$line" | jq -r '.registry'`
                repository=`echo "$line" | jq -r '.repository'`

                vuln_first_observed=`cat $PREV_ENRICHED_DATA_FILE_NAME | grep "\"vuln_id\":\"${vuln_id}\"" | grep "\"digest\":\"${digest}\"" | grep "\"image_id\":\"${image_id}\"" | grep "\"registry\":\"${registry}\"" | grep "\"repository\":\"${repository}\"" | jq -r '.vuln_first_observed' | head -1`

                if [ -z "$vuln_first_observed" ]
                then
                    vuln_first_observed=`echo "$line" | jq -r '.scan_time'`
                    vuln_age=0
                else
                    scan_time=`echo "$line" | jq -r '.scan_time'`
                    tmpScanTime=`date -j -f "%Y-%m-%d" "${scan_time:0:10}" +%s`
                    tmpFirstObservedTime=`date -j -f "%Y-%m-%d" "${vuln_first_observed:0:10}" +%s`
                    vuln_age=$((($tmpScanTime - $tmpFirstObservedTime) / 86400))
                fi
            fi

            newLine=`echo "$line" | jq -c ". += {\"vuln_first_observed\": \"${vuln_first_observed}\", \"vuln_age\":\"${vuln_age}\"}"`
            echo $newLine >> $ENRICHED_DATA_FILE_NAME
        done < <(grep  -v "\"vuln_id\":\"\"" $FLAT_DATA_FILE_NAME)   
        
        cat $ENRICHED_DATA_FILE_NAME | jq -s '.'  | jq -r '(.[0] | keys_unsorted) as $keys | $keys, map([.[ $keys[] ]])[] | @csv' > $OUTPUT_FILE_NAME
    fi

done
