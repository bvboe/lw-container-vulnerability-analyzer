#!/bin/bash
cd "$(dirname "$0")"
cd data

rm -f tmp*
rm -f output.csv

cat *-raw.json | jq '{
                        scan_id: {
                            digest: .evalCtx.image_info.digest,
                            vulnId: .vulnId
                        },
                        scan_time: .startTime
                    }' | jq -s 'group_by(
                                            .scan_id) 
                                | map({
                                        scan_id: .[0].scan_id, 
                                        scan_time: map(.scan_time) 
                                | unique}) 
                                | map(.scan_time |= sort)'  | \
                        jq '.[] | {scan_id: .scan_id, vuln_first_observed: .scan_time[0]}' | \
                        jq --slurp '.' > tmp-history.json

LAST_FILE=`ls *-raw.json | sort -r | head -1`
cat $LAST_FILE | jq '{
                        scan_id: {
                            digest: .evalCtx.image_info.digest,
                            vulnId: .vulnId
                        },
                        image_info: {
                            registry: .evalCtx.image_info.registry,
                            repo: .evalCtx.image_info.repo,
                            tags: .evalCtx.image_info.tags,
                            digest: .evalCtx.image_info.digest
                        },
                        vuln_info: {
                            severity: .severity,
                            vulnId: .vulnId,
                            description: .cveProps.description,
                            link: .cveProps.link
                        },
                        eval_time: .startTime,
                        fix_available: .fixInfo.fix_available,
                        risk_info: {
                            active_containers: .riskInfo.factors_breakdown.active_containers,
                            internet_reachability: .riskInfo.factors_breakdown.internet_reachability,
                            exploit_summary: .riskInfo.factors_breakdown.exploit_summary
                        },
                    } | .image_info.tags |= join(", ")' | jq --slurp '.' > tmp-condensed-data.json

cat tmp-condensed-data.json | \
    jq --slurpfile h tmp-history.json '. + $h[] | group_by(.scan_id) | map(add)' | \
    jq '.[] | select( .eval_time != null )  
            | . + {vuln_age:((((.eval_time[0:10]+"T00:00:00Z")|fromdate)-((.vuln_first_observed[0:10]+"T00:00:00Z")|fromdate))/86400)} 
            | del(.scan_id)' > tmp-complete-output.json

#cat tmp-complete-output.json | \
#    jq '[paths(values) as $path | {"key": $path | join("."), "value": getpath($path)}] | from_entries' | \
#    jq 'del(.image_info) | del(.vuln_info) | del(.risk_info) | del(."risk_info.exploit_summary")' | \
#    jq -s '.'  | jq -r '(.[0] | keys_unsorted) as $keys | $keys, map([.[ $keys[] ]])[] | @csv' > output.csv

cat tmp-complete-output.json | jq '{
                                    full_image_name: (.image_info.registry + "/" + .image_info.repo + ":" + .image_info.tags),
                                    registry: .image_info.registry,
                                    repo: .image_info.repo,
                                    tags: .image_info.tags,
                                    digest: .image_info.digest,
                                    severity: .vuln_info.severity,
                                    vulnId: .vuln_info.vulnId,
                                    description: .vuln_info.description,
                                    link: .vuln_info.link,
                                    eval_time: .eval_time,
                                    fix_available: .fix_available,
                                    active_containers: .risk_info.active_containers,
                                    internet_reachability: .risk_info.internet_reachability,
                                    disclosure_in_wild: .risk_info.exploit_summary.disclosure_in_wild,
                                    exploit_public: .risk_info.exploit_summary.exploit_public,
                                    exploit_virus_malware: .risk_info.exploit_summary.exploit_virus_malware,
                                    exploit_wormified: .risk_info.exploit_summary.exploit_wormified,
                                    vuln_first_observed: .vuln_first_observed,
                                    vuln_age: .vuln_age
                                }' | jq -s '.'  | jq -r '(.[0] | keys_unsorted) as $keys | $keys, map([.[ $keys[] ]])[] | @csv' > ../output.csv

echo Written result to output.csv